<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper     
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"     
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.depression.dao.TestingTypeDAO">

	<resultMap type="com.depression.model.TestingType" id="testingType"
		autoMapping="true">
		<id property="typeId" column="type_id" />
		<result property="parentId" column="parent_id" />
		<result property="testingName" column="testing_name" />
		<result property="tsType" column="ts_type" />
		<result property="thumbnail" column="thumbnail" />
		<result property="createTime" column="create_time" />
		<result property="modifyTime" column="modify_time" />
		<result property="isDelete" column="is_delete" />
	</resultMap>

	<select id="checkTestingTypeExits" resultType="int">
		select count(*) from testing_type where
		testing_name=#{testingName}
		<if test="typeId != null and typeId != ''">
			and type_id!=#{typeId}
		</if>
	</select>

	<select id="getCounts" resultType="long">
		select count(*) from
		testing_type
	</select>

	<select id="getTestingTypeList" resultMap="testingType">
		select * from testing_type
	</select>

	<select id="getTestingTypeListByQuery" parameterType="map" resultMap="testingType">
		select * from testing_type
		where 1=1
		<where>
			<if test="testingName != null and testingName != ''">
				and testing_name like CONCAT(CONCAT('%',#{testingName}),'%')
			</if>
		</where>
	</select>

	<select id="getPageList" resultMap="testingType">

		select * from testing_type where type_id >= (
		select type_id
		from
		testing_type
		where 1=1 
		<if test="testingName != null and testingName != ''">
			and testing_name like CONCAT(CONCAT('%',#{testingName}),'%')
		</if>
		ORDER BY type_id ASC
		LIMIT ${pageStartNum}, 1
		) 
		<if test="testingName != null and testingName != ''">
			and testing_name like CONCAT(CONCAT('%',#{testingName}),'%')
		</if>
		ORDER BY type_id ASC
		LIMIT ${pageSize};
	</select>

	<select id="getPageCounts" resultType="long">
		select count(*) from testing_type
		where 1=1
		<if test="testingName != null and testingName != ''">
			and testing_name like CONCAT(CONCAT('%',#{testingName}),'%')
		</if>
	</select>

	<select id="getValidTestingTypeList" resultMap="testingType" >
		select * from testing_type where is_delete = '0'
	</select>

	<select id="getTestingTypeListByQueryTestingType" resultMap="testingType">
		select * from testing_type where 1=1
		<if test="testingName != null and testingName != ''">
			and testing_name like CONCAT(CONCAT('%',#{testingName}),'%')
		</if>
		<if test="tsType != null">
			and ts_type = #{tsType}
		</if>
		<if test="isDelete != null">
			and is_delete = #{isDelete}
		</if>
	</select>

	<select id="getTestingTypeByTypeId" parameterType="string" resultMap="testingType">
		select * from testing_type where type_id=#{typeId}
	</select>

	<select id="getTestingTypeByTypeIds" parameterType="list" resultMap="testingType">
		select * from testing_type where type_id in
		<foreach collection="list" item="classList" open="("
			separator="," close=")">
			#{classList}
		</foreach>
	</select>

	<update id="updateTestingTypeEnableByTypeIds" parameterType="list">
		update testing_type
		<set>
			is_delete = '0'
		</set>
		where type_id in
		<foreach collection="list" item="typeId" open="("
			separator="," close=")">
			#{typeId, jdbcType=NUMERIC}
		</foreach>
	</update>
	
	<update id="updateTestingTypeDisableByTypeIds" parameterType="list">
		update testing_type
		<set>
			is_delete = '1'
		</set>
		where type_id in
		<foreach collection="list" item="typeId" open="("
			separator="," close=")">
			#{typeId, jdbcType=NUMERIC}
		</foreach>
	</update>

	<update id="updateTestingType" parameterType="com.depression.model.TestingType">
		update testing_type
		<set>
			<if test="parentId != null and parentId != ''">
				parent_id = #{parentId},
			</if>
			<if test="testingName != null and testingName != ''">
				testing_name = #{testingName},
			</if>
			<if test="tsType != null">
				ts_type = #{tsType},
			</if>
			<if test="thumbnail != null and thumbnail != ''">
				thumbnail = #{thumbnail},
			</if>
			<if test="modifyTime != null and modifyTime != ''">
				modify_time = #{modifyTime},
			</if>
			<if test="isDelete != null and isDelete != ''">
				is_delete = #{isDelete}
			</if>
		</set>
		where type_id=#{typeId}
	</update>

	<insert id="insertTestingType" parameterType="com.depression.model.TestingType">

		insert into
		testing_type
		(
		parent_id,
		testing_name,
		ts_type,
		thumbnail,
		create_time
		)
		VALUES(
		#{parentId},
		#{testingName},
		#{tsType},
		#{thumbnail},
		#{createTime}
		)

	</insert>

	<delete id="deleteTestingType" parameterType="string">
		delete testing_type where type_id=#{typeId}
	</delete>


</mapper>
